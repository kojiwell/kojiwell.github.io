"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5324],{8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var a=i(6540);const t={},s=a.createContext(t);function r(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(s.Provider,{value:n},e.children)}},8721:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var a=i(4848),t=i(8453);const s={id:"git",title:"Git - distributed version control system",sidebar_label:"Git"},r=void 0,l={id:"essential/git",title:"Git - distributed version control system",description:"Git enables developers to collaboratively manage and track changes to source code. As the most widely used version control system, Git is essential in most software projects.",source:"@site/docs/essential/git.md",sourceDirName:"essential",slug:"/essential/git",permalink:"/docs/essential/git",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"git",title:"Git - distributed version control system",sidebar_label:"Git"},sidebar:"notesSidebar",previous:{title:"Bash",permalink:"/docs/essential/bash"},next:{title:"Linux",permalink:"/docs/essential/linux"}},c={},o=[{value:"Basics",id:"basics",level:2},{value:"General setup",id:"general-setup",level:3},{value:"Repository setup",id:"repository-setup",level:3},{value:"Stage and snapshot",id:"stage-and-snapshot",level:3},{value:"Branch and merge",id:"branch-and-merge",level:3},{value:"Inspect and compare",id:"inspect-and-compare",level:3},{value:"Removal and file path changes",id:"removal-and-file-path-changes",level:3},{value:"Ignoring files/directories",id:"ignoring-filesdirectories",level:3},{value:"Optional",id:"optional",level:2},{value:"git config",id:"git-config",level:3},{value:"Tips",id:"tips",level:2},{value:"Compare two branches (e.g. main and dev)",id:"compare-two-branches-eg-main-and-dev",level:3},{value:"Tell git which ssh private key to use",id:"tell-git-which-ssh-private-key-to-use",level:3},{value:"Create a new empty branch",id:"create-a-new-empty-branch",level:3},{value:"Create a new branch in another worktree",id:"create-a-new-branch-in-another-worktree",level:3},{value:"Simple way to track config files by a bare git repo",id:"simple-way-to-track-config-files-by-a-bare-git-repo",level:3},{value:"Create an empty branch",id:"create-an-empty-branch",level:3},{value:"Delete and recreate a tag",id:"delete-and-recreate-a-tag",level:3},{value:"The seven rules of a great Git commit message",id:"the-seven-rules-of-a-great-git-commit-message",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Git enables developers to collaboratively manage and track changes to source code. As the most widely used version control system, Git is essential in most software projects."}),"\n",(0,a.jsx)(n.h2,{id:"basics",children:"Basics"}),"\n",(0,a.jsx)(n.h3,{id:"general-setup",children:"General setup"}),"\n",(0,a.jsx)(n.p,{children:"Set the name used in your commits"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:'git config --global user.name "[Firstname Lastname]"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Set the email address associated with your commits"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:'git config --global user.email "[valid email]"\n'})}),"\n",(0,a.jsx)(n.p,{children:'Change the default branch name from "master" to "main"'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git config --global init.defaultBranch main\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"NOTE:"})," The ",(0,a.jsx)(n.code,{children:"--global"})," option applies to all local Git repositories and is stored in your ",(0,a.jsx)(n.code,{children:"~/.gitconfig"})," file."]}),"\n",(0,a.jsx)(n.p,{children:"You can also set a different email locally (e.g., a work email) for a particular repository:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:'# Change directory to the repo\ncd /path/to/repo\n\n# Set an email address locally\ngit config --local user.email "[work email]"\n# Or, you don\'t actually need "--local" since the default is local\ngit config user.email "[work email]"\n\n# Check the config\ncat .git/config\n'})}),"\n",(0,a.jsx)(n.p,{children:"Set your preferred editor for Git"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:'git config --global core.editor "vim"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"repository-setup",children:"Repository setup"}),"\n",(0,a.jsx)(n.p,{children:"Initialize your current directory as a Git repository"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git init\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Initialize a shared Git repository. Conventionally, repositories with the ",(0,a.jsx)(n.code,{children:"--bare"})," flag\nend in ",(0,a.jsx)(n.code,{children:".git"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git init --bare [directory]\n\n# e.g.\ngit init --bare my_project.git\n"})}),"\n",(0,a.jsx)(n.p,{children:"Retrieve an entire repository from a hosted location."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"# via URL\ngit clone [url]\n\n# via SSH\ngit clone [user]@[server]:[path to a bare repository]\n\n# a bare repo on a local computer\ngit clone [path to a bare repository]\n"})}),"\n",(0,a.jsx)(n.h3,{id:"stage-and-snapshot",children:"Stage and snapshot"}),"\n",(0,a.jsx)(n.p,{children:"Show modified files - both staged and unstaged"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git status\n"})}),"\n",(0,a.jsx)(n.p,{children:"Stage a file or directory for your next commit"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"git add [file/directory]\n\n# Patch mode\ngit -p add [file/directory]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Unstage a file or directory while retaining the changes"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git reset [file/directory]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Show changes that are not staged"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git diff\n"})}),"\n",(0,a.jsx)(n.p,{children:"Show changes that are staged but not committed"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git diff --staged\n"})}),"\n",(0,a.jsx)(n.p,{children:"Commit your staged content as a new commit snapshot"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:'git commit -m "[descriptive message]"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"branch-and-merge",children:"Branch and merge"}),"\n",(0,a.jsx)(n.p,{children:"List branches. The current branch is marked with a *"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git branch\n"})}),"\n",(0,a.jsx)(n.p,{children:"Create a new branch at the current commit"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git branch [branch-name]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Switch to another branch and check it out into your working directory"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git checkout [branch]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Merge the specified branch's history into the current one"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git merge [branch]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Show all commits in the current branch's history"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git log\n"})}),"\n",(0,a.jsx)(n.h3,{id:"inspect-and-compare",children:"Inspect and compare"}),"\n",(0,a.jsx)(n.p,{children:"Show the history of the current branch"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git log\n"})}),"\n",(0,a.jsx)(n.p,{children:"Show commits on branchA that are not on branchB"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git log branchB..branchA\n"})}),"\n",(0,a.jsx)(n.p,{children:"Show commits that changed a file"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git log --follow [file]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Show the diff of what is in branchA that is not in branchB"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git diff branchB..branchA\n"})}),"\n",(0,a.jsx)(n.p,{children:"Compare a particular file in two branches -- main and dev"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git diff main..dev -- path/to/file\n"})}),"\n",(0,a.jsx)(n.h3,{id:"removal-and-file-path-changes",children:"Removal and file path changes"}),"\n",(0,a.jsx)(n.p,{children:"Delete the file from project and stage the removal for commit"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git rm [file]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Untrack the file from project and stage the removal for commit."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git rm --cached [file]\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"NOTE:"})," With the ",(0,a.jsx)(n.code,{children:"--cached"})," option, the file isn't deleted; it will show up as an unstaged file in the output of ",(0,a.jsx)(n.code,{children:"git status"}),". To keep it untracked, add it to the ",(0,a.jsx)(n.code,{children:".gitignore"})," file."]}),"\n",(0,a.jsx)(n.p,{children:"Change an existing file path and stage that move"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git mv [existing-path] [new-path]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Show all commit logs with indication of any paths that moved"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git log --stat -M\n"})}),"\n",(0,a.jsx)(n.h3,{id:"ignoring-filesdirectories",children:"Ignoring files/directories"}),"\n",(0,a.jsxs)(n.p,{children:["Create a ",(0,a.jsx)(n.code,{children:".gitignore"})," file in your repository and list the files and directories\nthat you want to ignore. Here are examples:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"logs/\n*.pyc\npattern*/\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To configure global ignores, create ",(0,a.jsx)(n.code,{children:"$HOME/.config/git/ignore"})," and list ignored files there. See\n",(0,a.jsx)(n.a,{href:"https://github.com/github/gitignore",children:"github / gitignore"})," for examples."]}),"\n",(0,a.jsx)(n.h2,{id:"optional",children:"Optional"}),"\n",(0,a.jsx)(n.h3,{id:"git-config",children:"git config"}),"\n",(0,a.jsxs)(n.p,{children:["Create a shortcut for a Git command. For example, ",(0,a.jsx)(n.code,{children:"git glog"})," as ",(0,a.jsx)(n.code,{children:"git log --graph --oneline"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:'git config alias.glog "log --graph --oneline"\n\n# These two are the same now\ngit glog\ngit log --graph --oneline\n'})}),"\n",(0,a.jsx)(n.p,{children:"Change editor (e.g. vim)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:'git config --global core.editor "vim"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"tips",children:"Tips"}),"\n",(0,a.jsx)(n.h3,{id:"compare-two-branches-eg-main-and-dev",children:"Compare two branches (e.g. main and dev)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git diff main...dev\n"})}),"\n",(0,a.jsx)(n.h3,{id:"tell-git-which-ssh-private-key-to-use",children:"Tell git which ssh private key to use"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:'# Set it permanently in the .git/config\ngit config core.sshCommand "ssh -i ~/.ssh/another_key"\n\n# Just once\ngit -c core.sshCommand="ssh -i ~/.ssh/another_key" clone ...\n\n# Environment variable\nexport GIT_SSH_COMMAND="ssh -i ~/.ssh/another_key"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"create-a-new-empty-branch",children:"Create a new empty branch"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:'git switch --orphan <new branch>\n\n# Create, commit, and push\ngit switch --orphan <new branch>\ngit commit --allow-empty -m "Initial commit on orphan branch"\ngit push -u origin <new branch>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"create-a-new-branch-in-another-worktree",children:"Create a new branch in another worktree"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"git worktree add <path> <branch>\n"})}),"\n",(0,a.jsx)(n.p,{children:"Create a throwaway worktree. You can make some experimental changes or do testing without\ndisturbing existing development."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"git worktree add -d <path>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"simple-way-to-track-config-files-by-a-bare-git-repo",children:"Simple way to track config files by a bare git repo"}),"\n",(0,a.jsxs)(n.p,{children:["Using a bare git repo with the ",(0,a.jsx)(n.code,{children:"status.showUntrackedFiles no"})," option allows you to safely track the files you want to keep tracking."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"git init --bare $HOME/.myfiles\nalias myfiles='/usr/bin/git --git-dir=$HOME/.myfiles/ --work-tree=$HOME'\nmyfiles config --local status.showUntrackedFiles no\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Add the following to your ",(0,a.jsx)(n.code,{children:"~/.bashrc"})," or ",(0,a.jsx)(n.code,{children:"~/.zshrc"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"alias myfiles='/usr/bin/git --git-dir=$HOME/.myfiles/ --work-tree=$HOME'\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now, you're all set."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:'myfiles add .zshrc\nmyfiles commit -m "Add zshrc file"\nmyfiles push --set-upstream origin master\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["Reference: ",(0,a.jsx)(n.a,{href:"https://www.atlassian.com/git/tutorials/dotfiles",children:"The best way to store your dotfiles: A bare Git repository"})]})}),"\n",(0,a.jsx)(n.h3,{id:"create-an-empty-branch",children:"Create an empty branch"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:'git checkout --orphan [empty-branch]\ngit rm -rf .\ngit commit --allow-empty -m "empty commit"\ngit push origin [empty-branch]\n'})}),"\n",(0,a.jsx)(n.h3,{id:"delete-and-recreate-a-tag",children:"Delete and recreate a tag"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"# delete the tag locally\ngit tag -d v0.2.28\n\n# delete the tag on the remote\ngit push --delete origin v0.2.28\n\n# recreate the tag\ngit tag v0.2.28\n\n# push the new tag\ngit push origin v0.2.28\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"git tag -f v0.2.28\ngit push origin -f v0.2.28\n"})}),"\n",(0,a.jsx)(n.h3,{id:"the-seven-rules-of-a-great-git-commit-message",children:"The seven rules of a great Git commit message"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Separate subject from body with a blank line"}),"\n",(0,a.jsx)(n.li,{children:"Limit the subject line to 50 characters"}),"\n",(0,a.jsx)(n.li,{children:"Capitalize the subject line"}),"\n",(0,a.jsx)(n.li,{children:"Do not end the subject line with a period"}),"\n",(0,a.jsx)(n.li,{children:"Use the imperative mood in the subject line"}),"\n",(0,a.jsx)(n.li,{children:"Wrap the body at 72 characters"}),"\n",(0,a.jsx)(n.li,{children:"Use the body to explain what and why vs. how"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["Reference: ",(0,a.jsx)(n.a,{href:"https://chris.beams.io/posts/git-commit/",children:"How to Write a Git Commit Message"})]})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);