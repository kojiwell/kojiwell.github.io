"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1244],{8571:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>c});var s=i(4848),r=i(8453);const t={id:"linux",title:"Linux",sidebar_label:"Linux"},l=void 0,d={id:"essential/linux",title:"Linux",description:"Linux is a Unix-based operating system. It's free and open source, and the most widely-used operating system.",source:"@site/docs/essential/linux.md",sourceDirName:"essential",slug:"/essential/linux",permalink:"/docs/essential/linux",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/essential/linux.md",tags:[],version:"current",frontMatter:{id:"linux",title:"Linux",sidebar_label:"Linux"},sidebar:"notesSidebar",previous:{title:"Git",permalink:"/docs/essential/git"},next:{title:"Tmux",permalink:"/docs/essential/tmux"}},o={},c=[{value:"File and directory operation",id:"file-and-directory-operation",level:2},{value:"find",id:"find",level:3},{value:"sed",id:"sed",level:3},{value:"rsync",id:"rsync",level:3},{value:"Networking",id:"networking",level:2},{value:"ip",id:"ip",level:2},{value:"Other things",id:"other-things",level:2},{value:"script - make typescript of terminal session",id:"script---make-typescript-of-terminal-session",level:3},{value:"Tips",id:"tips",level:2}];function a(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:'Linux is a Unix-based operating system. It\'s free and open source, and the most widely-used operating system.\nLinux inherits the Unix philosophy(minimalist, modular software development) - "do one thing do it well."'}),"\n",(0,s.jsx)(n.h2,{id:"file-and-directory-operation",children:"File and directory operation"}),"\n",(0,s.jsx)(n.h3,{id:"find",children:"find"}),"\n",(0,s.jsxs)(n.p,{children:["Find files owned by user ",(0,s.jsx)(n.code,{children:"foo"})," and change the owner to ",(0,s.jsx)(n.code,{children:"bar:group1"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"find /path/to/dir -user foo -exec chown -h bar:group1 {} \\;\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"List only directories"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"find $HOME -maxdepth 1 -type d |tail -n +2 |cut -d '/' -f 3-4\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"find $HOME -maxdepth 1 -type d"}),": Find directories in $HOME.\nAvoid recursive search, which is the default action of the find command."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tail -n +2"}),": List from the 2nd line. The first line is the current directory, which is the $HOME itself"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cut -d '/' -f 3-4"}),": Cut the line by '', and print from 3rd to 4th"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"sed",children:"sed"}),"\n",(0,s.jsxs)(n.p,{children:["Replace ",(0,s.jsx)(n.code,{children:"foo"})," with ",(0,s.jsx)(n.code,{children:"bar"})," in a text file"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sed -i.bak 's/foo/bar/g' file.txt\n\n# Ensure the partial words are not matched\nsed -i.bak 's/\\bfoo\\b/bar/g' file.txt\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-i[SUFFIX]"}),": Edit file in place (make backup if SUFFIX supplied)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"\\b"}),": word boundary. This ensures the partial words are not matched."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["Test ",(0,s.jsx)(n.code,{children:"sed"})," before edit a file to ensure the outcome"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"echo foo bar foobar barfoo |sed 's/foo/bar/g'                                 \n> bar bar barbar barbar\n\necho foo bar foobar barfoo |sed 's/\\bfoo\\b/bar/g'\n> bar bar foobar barfoo\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["Add ",(0,s.jsx)(n.code,{children:"prefix_"})," and/or ",(0,s.jsx)(n.code,{children:"_suffix"})," to every word  in a text"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# Prefix\necho foo bar | sed 's/\\</prefix_/g'\n> prefix_foo prefix_bar\n\n# Suffix\necho foo bar | sed 's/\\>/_suffix/g'\n> foo_suffix bar_suffix\n\n# Prefix and suffix\necho foo bar | sed -e 's/\\</prefix_/g' -e 's/\\>/_suffix/g'\n> prefix_foo_suffix prefix_bar_suffix\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Delete the line that matches the key word"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"seq -f line-'%02g' 10|sed -e '/03/d' -e '/06/d'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"rsync",children:"rsync"}),"\n",(0,s.jsx)(n.p,{children:"Options I often use"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--archive, -a"})," : archive mode"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--verbose, -v"})," : increase verbosity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--stats"})," : print a verbose set of statistics on the file transfer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--link-dest=/absolute/path/to/dir"})," : unchanged files are hard linked from ",(0,s.jsx)(n.code,{children:"/complete/path/to/dir"})," to the destination directory"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--update, -u"})," : skip files that are newer on the receiver"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--dry-run, -n"})," : perform a trial run with no changes made"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--one-file-system, -x"})," : don't cross filesystem boundaries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--delete"})," : delete extraneous files from dest dirs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--exclude=PATTERN"})," : exclude files matching PATTERN"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--exclude-from=FILE"})," : read exclude patterns from FILE"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--progress"})," : show progress during transfer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--log-file=FILE"}),' : override the "log file" setting']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--backup, -b"})," : make backups"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--backup-dir=/absolute/path/to/dir/"})," : make backups into hierarchy based in ",(0,s.jsx)(n.code,{children:"/absolute/path/to/dir/"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"rsync examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# Sync src to dest and store the differences in src.YYYY-MM-DD\nrsync -av --backup --delete --backup-dir=$PWD/src.$(date +%Y-%m-%d)/ src/ dest\n\n# Backup the system partition to /backup directory. (Exclude if /backup is on the system partition.)\nrsync -a --stats --one-file-system --exclude=/backup / /backup\n\n# Create a hard linked twin of src as src.YYYY-MM-DD\nrsync -a --link-dest=$PWD/src src/ src.$(date +%Y-%m-%d)\n\n# Rsync everything but use hard link if the file is the same as the link-dest. \n# This saves disk space while each of src.YYYY-MM-DD is a complete backup.\nrsync -a --link-dest=$PWD/src.YYYY-MM-DD src/ src.$(date +%Y-%m-%d)\n\n# Sync only files and ignore directories\nrsync -av --exclude='/*/' src/ dest\n"})}),"\n",(0,s.jsx)(n.h2,{id:"networking",children:"Networking"}),"\n",(0,s.jsx)(n.h2,{id:"ip",children:"ip"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Show list\nip link list\n\n# Link up\nip link set dev <interface> up\n\n# Link down\nip link set dev <interface> down\n"})}),"\n",(0,s.jsx)(n.h2,{id:"other-things",children:"Other things"}),"\n",(0,s.jsx)(n.h3,{id:"script---make-typescript-of-terminal-session",children:"script - make typescript of terminal session"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# Start the script\n## newer version (util-linux 2.36.1)\nscript -a --log-timing log/install_ofed.tm --log-output log/install_ofed.log\n## older version (util-linux 2.34)\nscript -a --timing=log/install_ofed.tm log/install_ofed.log\n\n# Replay it\n## newer version\nscriptreply --log-timing log/install_ofed.tm --log-output log/install_ofed.log\n## older version\nscriptreply --timing=log/install_ofed.tm log/install_ofed.log\n\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-a"})," : Append the session if the output file exists"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Remove special characters in the typescript file generated by the ",(0,s.jsx)(n.code,{children:"script"})," command.\nThis is helpful when you want to read the file in a text viewer - such as ",(0,s.jsx)(n.code,{children:"less"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"cat log/install_ofed.log | ansi2txt | iconv | col -b > log/install_ofed.txt\nless log/install_ofed.txt\n"})}),"\n",(0,s.jsx)(n.h2,{id:"tips",children:"Tips"}),"\n",(0,s.jsx)(n.p,{children:"Show count down in sleep command"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'# 60 seconds\nfor i in `seq 60 -1 1`; do echo -ne "\\r$i "; sleep 1; done\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>d});var s=i(6540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);